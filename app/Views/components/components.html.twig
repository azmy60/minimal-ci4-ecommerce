<!--
  Use this component if you need an input field wrapped with a label and a helper text,
  otherwise use a regular html <input> with 'input' class for simple use cases.
  hint: <input type="text" class="input input-default"> (see /src/css/components/input.css) 
  
  input options: 
  - label
  - name
  - value
  - placeholder
  - helper
  - size [sm|base|lg]
  - type [text|password|textarea|or whatever]
  - rows [for textarea]
  - error
  - attributes
  - inputAttributes
  - class
-->
{% macro input(options) %}
<div class="grid gap-1 {{ options.class }}" {{ options.attributes|raw }}>
  {% if options.label is not empty %}
  <label for="{{ options.name }}" class="{{ options.error is not empty ? 'text-red-500' : 'text-trueGray-800' }} font-semibold">
    {{ options.label }}
  </label>
  {% endif %}

  {% set input_color = options.error ? 'input-danger' : 'input-default' %}
  {% set input_size = options.size == 'sm' ? 'input-sm' : options.size == 'lg' ? 'input-lg' : 'input-base' %}
  {% if options.type == 'password' %}
  <input-password name="{{ options.name }}" placeholder="{{ options.placeholder }}" size="{{ options.size }}" color="{{ options.error ? 'danger' : 'default' }}"></input-password>
  {% elseif options.type == 'textarea' %}
  <textarea id="{{ options.name }}" name="{{ options.name }}" placeholder="{{ options.placeholder }}" rows="{{ options.rows }}" class="input {{ input_size }} {{ input_color }}" {{ options.inputAttributes|raw }}>{{ options.value }}</textarea>
  {% else %}  
  <input id="{{ options.name }}" name="{{ options.name }}" placeholder="{{ options.placeholder }}" type="{{ options.type }}" value="{{ options.value }}" class="input {{ input_size }} {{ input_color }}" {{ options.inputAttributes|raw }}>
  {% endif %}

  {% if options.error is not empty %}
  <p class="text-red-500">{{ options.error }}</p>
  {% elseif options.helper is not empty %}
  <p class="text-trueGray-500">{{ options.helper }}</p>
  {% endif %}
</div>
{% endmacro %}

{#
switch options:
- name
- checkedValue
- uncheckedValue
- checked [true|false]
- activeText
- inactiveText
- attributes
- class
#}
{% macro switch(options) %}
<div x-data="{ checked: {{ options.checked ? 'true': 'false' }} }" class="{{ options.class }} flex items-center gap-2" {{ options.attributes|raw }}>
  <input x-ref="{{ options.name }}" id="{{ options.name }}" value="{{ options.checked ? options.checkedValue : options.uncheckedValue }}" name="{{ options.name }}" class="hidden">
  <div @click="checked = !checked; $el.previousElementSibling.value = checked ? '{{ options.checkedValue }}' : '{{ options.uncheckedValue }}'" :class="{'bg-emerald-500': checked, 'bg-trueGray-300': !checked}" class="relative cursor-pointer w-14 h-7 rounded-3xl">
    <div :class="{'left-8': checked, 'left-1': !checked }" class="absolute w-5 h-5 bg-white rounded-full left-8 top-1"></div>
  </div>
  <div>
    <span x-show="checked">{{ options.activeText }}</span>
    <span x-show="!checked">{{ options.inactiveText }}</span>
  </div>
</div>
{% endmacro %}

{#
products_categories_filters_n_search_bar props:
- chips <array of object>
  > text
  > filter
- hx_get
#}
{% macro products_categories_filters_n_search_bar(props) %}
<div x-data="{ selected: 0 }" class="flex items-center w-full gap-4 px-7 mt-7">
  <input type="hidden" name="filter" value="all">
  {% for chip in props.chips %}
  <button hx-get="{{ props.hx_get }}" hx-vals='{ "filter": "{{ chip.filter }}" }' hx-include="[name='q']" hx-target="#list-container" hx-indicator="#list-indicator" :selected="selected === {{ loop.index0 }}" @click="selected = {{ loop.index0 }}; document.querySelector(`[name='filter']`).value = '{{ chip.filter }}'" class="chip chip-base">
    <span :class="{ 'font-semibold': selected === {{ loop.index0 }} }">{{ chip.text }}</span>
  </button>
  {% endfor %}
  <input-container x-data="{ isEmpty: true }" class="flex-grow input-base input-default">
    <input x-ref="input" @input="isEmpty = $event.target.value === ''" type="text" name="q" placeholder="Cari produk" autocomplete="off" hx-get="{{ props.hx_get }}" hx-include="[name='filter']" hx-trigger="keyup changed delay:500ms, click from:#btn-clear" hx-target="#list-container" hx-indicator="#list-indicator">
    <svg x-cloak x-show="isEmpty" class="fill-current text-trueGray-400"><use xlink:href="#ph_magnifying-glass"></svg>
    <svg x-cloak x-show="!isEmpty" @click="$refs.input.value = ''; isEmpty = true;" class="text-black fill-current" id="btn-clear"><use xlink:href="#ph_x"></svg>
  </input-container>
</div>
{% endmacro %}
