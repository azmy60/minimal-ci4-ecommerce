{% extends "wrappers/base.html.twig" %}
{% block head %}
<script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/muuri@0.9.5/dist/muuri.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
{% endblock head %}
{% block title %}Tambah produk - {{ store.name }}{% endblock title %}

{% block body %}

{% include "dest/symbol/iconset.svg" %}

<header class="flex items-center py-4 space-x-12 px-7">
  <a href="{{ route_to('admin/products') }}">
    <svg class="fill-current w-11 h-11">
      <use xlink:href="#ph_caret-left">
    </svg>
  </a>
  <h1 class="block text-3xl font-bold">Tambah produk</h1>
</header>

<main class="w-full mt-8">
  <form class="pb-16 mx-auto space-y-24 w-min" action="{{ route_to('admin/add_product') }}" method="post" enctype="multipart/form-data">
    {{ csrf_field() }}
    <section>
      {% import "components/components.html.twig" as components %}
      {{ _self.input_row({
        label: 'Foto',
        helper: 'Format foto .jpg .jpeg .png dengan ukuran minimal 1000 x 1000px dan maksimal 2MB.<br><br>
        Pilih foto atau tarik dan letakkan di kotak hingga 10 foto. Geser foto sesuai urutan yang diinginkan.',
        name: 'photos',
        input_area: _self.upload_zone(),
      }) }}
    </section>

    <section class="space-y-10">
      {{ _self.input_row({
      label: 'Judul',
      helper: 'Cantumkan maks. 80 karakter.',
      for: 'title',
      input_area: 
        components.input({
          name: 'title', type: 'text', size: 'lg', error: session('errors.title'), class: 'w-full'
        }),
      }) }}

      {{ _self.input_row({
      label: 'Deskripsi',
      helper: 'Cantumkan maks. 4000 karakter.',
      for: 'desc',
      input_area:
        components.input({ 
          name: 'desc', type: 'textarea', size: 'lg', rows: 6, error: session('errors.desc'), class: 'w-full'
        }),
      }) }}

      {{ _self.input_row({
      label: 'Kategori (opsional)',
      helper: 'Produkmu bisa dikategorikan agar memudahkan calon pembeli. Pelajari tips mengkategorikan produk.',
      for: 'cat_id',
      input_area: block('add_categories_input'),
      }) }}
    </section>

    {#
    <section>
      {{ _self.input_row({
      label: 'Varian (opsional)',
      helper: 'Kamu bisa menambah varian produk seperti warna, ukuran dan rasa.',
      for: 'variant',
      input_area: '
        <button disabled class="btn btn-base btn-outlined-emerald">
          <svg><use xlink:href="#ph_plus-bold"></svg>
          <span>Tambah varian</span>
        </button>
      ',
      }) }}
    </section>
    #}

    <section class="space-y-10">
      {{ _self.input_row({
      label: 'Stok',
      for: 'stock',
      input_area: components.switch({
        name: 'stock',
        checkedValue: 1,
        uncheckedValue: 0,
        checked: true,
        activeText: 'Ada',
        inactiveText: 'Habis',
      }),
      }) }}

      {{ _self.input_row({
      label: 'Harga',
      helper: 'Cantumkan harga asli produkmu',
      for: 'price',
      input_area: block('input_price'),
      }) }}

      {#
      {{ _self.input_row({
      label: 'Diskon (opsional)',
      helper: 'Kamu bisa mencantum harga setelah diskon dari harga asli.',
      for: 'discount',
      input_area:'
        <button disabled class="btn btn-base btn-outlined-emerald">
          <svg><use xlink:href="#ph_plus-bold"></svg>
          <span>Beri diskon</span>
        </button>
      ',
      }) }}
      #}
    </section>

    <section class="flex justify-end space-x-3">
      <a href="{{ route_to('admin/products') }}">
        <button type="button" class="btn btn-base btn-outlined-black">Batalkan</button>
      </a>
      <button type="submit" class="btn btn-base btn-emerald">Simpan</button>
    </section>
  </form>
</main>
<script src="{{ base_url('/js/addProductHelper.js') }}"></script>
{% endblock body %}

{#
input_row options:
- label
- helper
- for
- input_area
- class
#}
{% macro input_row(options) %}
<div class="{{ options.class }} flex gap-20">
  <div class="space-y-1 w-72">
    <label for="{{ options.for }}" class="text-xl font-semibold">{{ options.label }}</label>
    <p class="text-base">{{ options.helper|raw }}</p>
  </div>
  <div class="w-[37rem]">{{ options.input_area|raw }}</div>
</div>
{% endmacro %}

{% macro upload_zone() %}
  <div x-init="muuri = new Muuri($refs['thumbnails-container'], {
    dragEnabled: true,
    dragStartPredicate: (item, event) => {
      if(!event.target.closest('upload-zone-thumbnail'))
          return false
      return Muuri.ItemDrag.defaultStartPredicate(item, event)
    },
    dragSortPredicate: (item) => {
      const result = Muuri.ItemDrag.defaultSortPredicate(item)
      return result && result.index === files.length ? false : result
    },
  });
  muuri.on('dragStart', (item) => {
    const itemId = item.getElement().tid
    prevPos = muuri.getItems().findIndex((it) => it.getElement().tid === itemId)
  });
  muuri.on('dragReleaseEnd', (item) => {
    // Sort element based on uploadZoneThumbnail.tid
    
    const itemId = item.getElement().tid
    const items = muuri.getItems()
    items.pop() // remove the upload-btn from the list
    
    const currentPos = items.findIndex((item) => item.getElement().tid === itemId)
    
    if(currentPos === prevPos) // no swapping
      return

    const slicedFiles = files.splice(prevPos, 1)

    files.splice(currentPos, 0, slicedFiles[0])

    const dt = new DataTransfer()
    for(let i = 0; i < files.length; i++) {
      dt.items.add(files[i].file)
    }

    input.files = dt.files
  });" x-data="helper.uploadZoneData()" id="uploadZone" @dragover.prevent="ondragover($el)" @dragleave.prevent="ondragleave($el)" @drop.prevent="ondropfiles($event, $event.dataTransfer.files, $el.classList.remove('ring', 'ring-emerald-500', 'ring-emerald-trueGray'))" class="relative w-full h-full rounded-lg">
    <input x-ref="inputFile" @change.prevent="ondropfiles($event, $el.files)" type="file" multiple name="photos[]" id="photos" class="hidden">
    <div x-ref="thumbnails-container" id="thumbnails-container" class="relative w-full -m-3">

      <div id="upload-btn" @click="$refs.inputFile.click()" class="{{ session('errors.photos') ? 'border-red-500' : border-trueGray-400 }} grid border-2 rounded-lg cursor-pointer w-28 h-28 place-content-center">
        <svg class="fill-current w-9 h-9 text-trueGray-400">
          <use xlink:href="#ph_upload-simple">
        </svg>
      </div>
      
    </div>
    <style>
      #thumbnails-container > * {
        position: absolute;
        margin: 0.75rem;
      }
    </style>
  </div>
{% endmacro %}

{% block input_price %}
<input name="price" type="hidden">
<input-container class="w-full input-lg input-default">
  <span>Rp</span>
  <input x-data @input="priceMask($event)" type="text">
</input-container>
<script>
  function priceMask(e) {
    const x = e.target.value.replace(/\D/g, '')
    const rem = x.length % 3
    const x2 = x.substring(rem).match(/(\d{3})/g)
    let formated = ''

    if(rem > 0)
      formated = x.substring(0, rem)

    if(x2)
      formated += (rem > 0 ? '.' : '') + x2.join('.')

    e.target.value = formated
    console.log(x)
    document.querySelector('[name="price"]').value =  x
  }
</script>
{% endblock input_price %}

{% block add_categories_input %}
<script>
  const catJson = JSON.parse('{{ categories|json_encode()|raw }}')
</script>
<div x-data="helper.addCatData(catJson)" class="relative">
  <input name="cats" type="hidden" :value="JSON.stringify(selectedCats)">
  <input x-ref="input" @focus="show = true" x-model="inputVal" @input="searchCat(inputVal)" @keydown.enter.prevent @clearinput.window="$el.value = ''" placeholder="Ketik kategori disini" class="w-full input input-lg input-default">
  <div class="flex gap-2 mt-4">
    <template x-for="cat in selectedCats">
      <span class="chip chip-sm">
        <span class="lozenge lozenge-sm lozenge-success" x-show="cat.id < 0">Baru</span>
        <span x-text="cat.name"></span>
        <svg @click="removeCat(cat)"><use xlink:href="#ph_x"></svg>
      </span>
    </template>
  </div>
  <ul x-cloak x-show="show" @click="show = false" @click.outside="show = $event.target === $refs.input" :style="{ top: `calc(${$refs.input.clientHeight}px + 1rem)` }" class="absolute left-0 w-full top-full dropdown-menu dropdown-menu-lg">
    <template x-for="cat in cats">
      <li x-text="cat.name" @click="addCat(cat); $dispatch('clearinput')"></li>
    </template>
    <template x-if="cats.length === 0 && inputVal.trim()">
      <li x-text="'Tambah kategori ' + inputVal" @click="addCat({id: newIdCounter(), name: inputVal }); inputVal = ''; "></li>
    </template>
  </ul>
</div>
{% endblock add_categories_input %}