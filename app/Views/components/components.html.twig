<!--
  input_field options: 
  - label
  - name
  - placeholder
  - helper
  - autocomplete [true|false]
  - size [small|medium|large]
  - type [text|password|textarea|or whatever]
  - rows [for textarea]
  - error
  - attributes
  - inputAttributes
  - class
-->
{% macro input(options) %}
<div class="grid gap-1 {{ options.class }}" {{ options.attributes|raw }}>
  {% if options.label is not empty %}
  <label for="{{ options.name }}" class="{{ options.error is not empty ? 'text-red-500' : 'text-trueGray-800' }} font-semibold">
    {{ options.label }}
  </label>
  {% endif %}

  {% set common_classes = (options.error is not empty ? 'border-red-500' : 'border-trueGray-400') ~ ' py-2.5 bg-white border rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent placeholder-trueGray-500' %}
  {% if options.type == 'password' %}
  <div x-data="{ show: false }" class="{{ options.class }} relative" {{ options.inputAttributes|raw }}>
    <div x-cloak @click="$refs.passwordInput.focus(); show = !show" class="absolute w-6 h-6 transform -translate-y-1/2 cursor-pointer right-4 top-1/2 text-trueGray-500">
      <svg x-show="!show" class="w-full h-full fill-current">
        <use xlink:href="#ph_eye" />
      </svg>
      <svg x-show="show" class="w-full h-full fill-current">
        <use xlink:href="#ph_eye-slash" />
      </svg>
    </div>
    <input id="{{ options.name }}" name="{{ options.name }}" placeholder="{{ options.placeholder }}" :type="show ? 'text' : 'password'" x-ref="passwordInput" autocomplete="{{ options.autocomplete }}" type="password" class="{{ common_classes }} w-full pl-4 pr-12">
  </div>
  {% elseif options.type == 'textarea' %}
  <textarea id="{{ options.name }}" name="{{ options.name }}" placeholder="{{ options.placeholder }}" autocomplete="{{ options.autocomplete }}" rows="{{ options.rows }}" class="{{ common_classes }} px-4" {{ options.inputAttributes|raw }}></textarea>
  {% else %}  
  <input id="{{ options.name }}" name="{{ options.name }}" placeholder="{{ options.placeholder }}" autocomplete="{{ options.autocomplete }}" type="{{ options.type }}" class="{{ common_classes }} px-4" {{ options.inputAttributes|raw }}>
  {% endif %}

  {% if options.error is not empty %}
  <p class="text-red-500">{{ options.error }}</p>
  {% elseif options.helper is not empty %}
  <p class="text-trueGray-500">{{ options.helper }}</p>
  {% endif %}
</div>
{% endmacro %}

{#
switch options:
- name
- value
- checked [true|false]
- activeText
- inactiveText
- attributes
- class
#}
{% macro switch(options) %}
<div x-data="{ checked: {{ options.checked ? 'true': 'false' }} }" class="{{ options.class }} flex items-center space-x-2" {{ options.attributes|raw }}>
  <input x-ref="{{ options.name }}" id="{{ options.name }}" name="{{ options.name }}" value="{{ options.value }}" class="hidden">
  <div @click="checked = !checked" :class="{'bg-emerald-500': checked, 'bg-trueGray-300': !checked}" class="relative cursor-pointer w-14 h-7 rounded-3xl">
    <div :class="{'left-8': checked, 'left-1': !checked }" class="absolute w-5 h-5 bg-white rounded-full left-8 top-1"></div>
  </div>
  <div>
    <span x-show="checked">{{ options.activeText }}</span>
    <span x-show="!checked">{{ options.inactiveText }}</span>
  </div>
</div>
{% endmacro %}

{#
dropdown options:
- class
- attributes
- selections [array of objects]
  . text
  . icon
  . dangerTheme [true|false]
  . attributes
> dispatch this element with 'toggle' event. hint: dropdownEl.dispatchEvent(new CustomEvent('toggle'))
#}
{% macro dropdown(options) %}
<div x-cloak x-data="{ show: false }" @toggle="show = !show" @click.outside="show = false" x-show="show" class="{{ class }} absolute z-50 overflow-hidden bg-white border divide-y rounded-lg drop-shadow border-trueGray-200 divide-trueGray-200" {{ options.attributes|raw }}>
  {% for selection in options.selections %}
  <button class="{{ selection.dangerTheme ? 'bg-red-50 text-red-500 hover:bg-red-200' : 'hover:bg-trueGray-200' }} flex items-center gap-4 justify-between w-full px-4 py-2 select-none" {{ selection.attributes|raw }} >
    <span>{{ selection.text }}</span>
    {% if selection.icon %}
    <svg class="w-5 h-5 fill-current">
      <use xlink:href="#ph_{{ selection.icon }}">
    </svg>
    {% endif %}
  </button>
  {% endfor %}
</div>
{% endmacro %}